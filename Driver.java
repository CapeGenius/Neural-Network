/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neuralnetwork;

import java.io.*;
//import com.opencsv.CSVWriter;

/**
 *
 * @author rohan
 */
public class Driver
{
  public static void main(String[] args)
  {
    //instantiate obecjts of a class
    NeuralNetwork objNeuralNetworkNetwork = new NeuralNetwork();
    NeuralNetwork.Network objNetwork = objNeuralNetworkNetwork.new Network();
    objNetwork.initializeMatrices();
    
    
       
    int[][] trainingData = {
        {1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0}, //0
        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0}, //1
        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0}, //1
        {0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0}, //1 
        {1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0}, //2
        {0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0}, //2
        {1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0}, //2
        {1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0}, //3
        {1,1,1,0,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0}, //3
        {0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0}, //3
        {1,1,1,0,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0}, //3
        {1,0,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0}, //4
        {0,0,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0}, //4
        {1,0,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0}, //4
        {1,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0}, //4
        {1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0}, //5
        {1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0}, //5
        {1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0}, //5
        {1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0}, //6
        {1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0}, //6
        {1,0,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0}, //6
        {1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0}, //7
        {1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0}, //7
        {1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0}, //8
        {1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1}, //9
        {1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1}, //9
        {1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1}  //9
    };
    
    
    int[][] expectedOutput = {
      {1,0,0,0,0,0,0,0,0,0}, //0
      {0,1,0,0,0,0,0,0,0,0}, //1
      {0,1,0,0,0,0,0,0,0,0}, //1
      {0,1,0,0,0,0,0,0,0,0}, //1
      {0,0,1,0,0,0,0,0,0,0}, //2
      {0,0,1,0,0,0,0,0,0,0}, //2
      {0,0,1,0,0,0,0,0,0,0}, //2
      {0,0,0,1,0,0,0,0,0,0}, //3
      {0,0,0,1,0,0,0,0,0,0}, //3
      {0,0,0,1,0,0,0,0,0,0}, //3
      {0,0,0,1,0,0,0,0,0,0}, //3
      {0,0,0,0,1,0,0,0,0,0}, //4
      {0,0,0,0,1,0,0,0,0,0}, //4
      {0,0,0,0,1,0,0,0,0,0}, //4
      {0,0,0,0,1,0,0,0,0,0}, //4
      {0,0,0,0,0,1,0,0,0,0}, //5
      {0,0,0,0,0,1,0,0,0,0}, //5
      {0,0,0,0,0,1,0,0,0,0}, //5
      {0,0,0,0,0,0,1,0,0,0}, //6
      {0,0,0,0,0,0,1,0,0,0}, //6
      {0,0,0,0,0,0,1,0,0,0}, //6
      {0,0,0,0,0,0,0,1,0,0}, //7
      {0,0,0,0,0,0,0,1,0,0}, //7
      {0,0,0,0,0,0,0,0,1,0}, //8
      {0,0,0,0,0,0,0,0,0,1}, //9
      {0,0,0,0,0,0,0,0,0,1}, //9
      {0,0,0,0,0,0,0,0,0,1}, //9
    };
    
    int[][] validationData = {
        {1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0}, //0
        {0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0}, //1
        {0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0}, //1
        {0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0}, //1
        {1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0}, //2
        {1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0}, //2
        {0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0}, //2
        {1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0}, //3
        {0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0}, //3
        {0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0}, //3
        {1,0,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0}, //4
        {0,0,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0}, //4
        {0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0}, //4
        {1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0}, //5
        {1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0}, //5
        {1,1,0,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0}, //5
        {1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0}, //6
        {1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0}, //6
        {1,0,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0}, //6
        {1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0}, //7
        {1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0}, //7
        {0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0}, //7
        {1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0}, //8
        {1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1}, //9
        {1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1}, //9
        {1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1}  //9
    };
    
    System.out.println("The training data length is " + trainingData.length);
    System.out.println("The expected output length is " + expectedOutput.length);
    
    objNetwork.print2D();
    
    int counter = 0;
    
    while (counter < 10000)
    {
      /*int i = Math.abs((int) (Math.random()*trainingData.length - Math.random()*trainingData.length));
      objNetwork.trainNetwork(trainingData[i], expectedOutput[i]);*/
      
      for (int i = (int) Math.random()*trainingData.length/2; i < trainingData.length; i++)
      {
        objNetwork.trainNetwork(trainingData[i], expectedOutput[i]);
      }
      counter++;
    }
    
    System.out.println("Hello!");
    
    objNetwork.print2D();
    
    //System.out.print(validationData);
    
    for (int i = 0; i < validationData.length; i++)
    {
      objNetwork.validationOutput(validationData[i]);
    }
  }
}
